// Code generated by ent, DO NOT EDIT.

package http

import (
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/pets/ent"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	MountRoutes(c, l, r)
	return r
}

// MountRoutes mounts all generated routes on the given router.
func MountRoutes(c *ent.Client, l *zap.Logger, r chi.Router) {
	NewBadgeHandler(c, l).MountRoutes(r)
	NewPetHandler(c, l).MountRoutes(r)
	NewPlayGroupHandler(c, l).MountRoutes(r)
	NewToyHandler(c, l).MountRoutes(r)
}

// BadgeHandler handles http crud operations on ent.Badge.
type BadgeHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewBadgeHandler(c *ent.Client, l *zap.Logger) *BadgeHandler {
	return &BadgeHandler{
		client: c,
		log:    l.With(zap.String("handler", "BadgeHandler")),
	}
}
func (h *BadgeHandler) MountCreateRoute(r chi.Router) *BadgeHandler {
	r.Post("/badges", h.Create)
	return h
}
func (h *BadgeHandler) MountReadRoute(r chi.Router) *BadgeHandler {
	r.Get("/badges/{id}", h.Read)
	return h
}
func (h *BadgeHandler) MountUpdateRoute(r chi.Router) *BadgeHandler {
	r.Patch("/badges/{id}", h.Update)
	return h
}
func (h *BadgeHandler) MountDeleteRoute(r chi.Router) *BadgeHandler {
	r.Delete("/badges/{id}", h.Delete)
	return h
}
func (h *BadgeHandler) MountListRoute(r chi.Router) *BadgeHandler {
	r.Get("/badges", h.List)
	return h
}
func (h *BadgeHandler) MountWearerRoute(r chi.Router) *BadgeHandler {
	r.Get("/badges/{id}/wearer", h.Wearer)
	return h
}
func (h *BadgeHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountWearerRoute(r)
}

// PetHandler handles http crud operations on ent.Pet.
type PetHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPetHandler(c *ent.Client, l *zap.Logger) *PetHandler {
	return &PetHandler{
		client: c,
		log:    l.With(zap.String("handler", "PetHandler")),
	}
}
func (h *PetHandler) MountCreateRoute(r chi.Router) *PetHandler {
	r.Post("/pets", h.Create)
	return h
}
func (h *PetHandler) MountReadRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}", h.Read)
	return h
}
func (h *PetHandler) MountUpdateRoute(r chi.Router) *PetHandler {
	r.Patch("/pets/{id}", h.Update)
	return h
}
func (h *PetHandler) MountDeleteRoute(r chi.Router) *PetHandler {
	r.Delete("/pets/{id}", h.Delete)
	return h
}
func (h *PetHandler) MountListRoute(r chi.Router) *PetHandler {
	r.Get("/pets", h.List)
	return h
}
func (h *PetHandler) MountBadgeRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/badge", h.Badge)
	return h
}
func (h *PetHandler) MountProtegeRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/protege", h.Protege)
	return h
}
func (h *PetHandler) MountMentorRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/mentor", h.Mentor)
	return h
}
func (h *PetHandler) MountSpouseRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/spouse", h.Spouse)
	return h
}
func (h *PetHandler) MountToysRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/toys", h.Toys)
	return h
}
func (h *PetHandler) MountParentRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/parent", h.Parent)
	return h
}
func (h *PetHandler) MountChildrenRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/children", h.Children)
	return h
}
func (h *PetHandler) MountPlayGroupsRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/play-groups", h.PlayGroups)
	return h
}
func (h *PetHandler) MountFriendsRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}/friends", h.Friends)
	return h
}
func (h *PetHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountBadgeRoute(r).MountProtegeRoute(r).MountMentorRoute(r).MountSpouseRoute(r).MountToysRoute(r).MountParentRoute(r).MountChildrenRoute(r).MountPlayGroupsRoute(r).MountFriendsRoute(r)
}

// PlayGroupHandler handles http crud operations on ent.PlayGroup.
type PlayGroupHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPlayGroupHandler(c *ent.Client, l *zap.Logger) *PlayGroupHandler {
	return &PlayGroupHandler{
		client: c,
		log:    l.With(zap.String("handler", "PlayGroupHandler")),
	}
}
func (h *PlayGroupHandler) MountCreateRoute(r chi.Router) *PlayGroupHandler {
	r.Post("/play-groups", h.Create)
	return h
}
func (h *PlayGroupHandler) MountReadRoute(r chi.Router) *PlayGroupHandler {
	r.Get("/play-groups/{id}", h.Read)
	return h
}
func (h *PlayGroupHandler) MountUpdateRoute(r chi.Router) *PlayGroupHandler {
	r.Patch("/play-groups/{id}", h.Update)
	return h
}
func (h *PlayGroupHandler) MountDeleteRoute(r chi.Router) *PlayGroupHandler {
	r.Delete("/play-groups/{id}", h.Delete)
	return h
}
func (h *PlayGroupHandler) MountListRoute(r chi.Router) *PlayGroupHandler {
	r.Get("/play-groups", h.List)
	return h
}
func (h *PlayGroupHandler) MountParticipantsRoute(r chi.Router) *PlayGroupHandler {
	r.Get("/play-groups/{id}/participants", h.Participants)
	return h
}
func (h *PlayGroupHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountParticipantsRoute(r)
}

// ToyHandler handles http crud operations on ent.Toy.
type ToyHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewToyHandler(c *ent.Client, l *zap.Logger) *ToyHandler {
	return &ToyHandler{
		client: c,
		log:    l.With(zap.String("handler", "ToyHandler")),
	}
}
func (h *ToyHandler) MountCreateRoute(r chi.Router) *ToyHandler {
	r.Post("/toys", h.Create)
	return h
}
func (h *ToyHandler) MountReadRoute(r chi.Router) *ToyHandler {
	r.Get("/toys/{id}", h.Read)
	return h
}
func (h *ToyHandler) MountUpdateRoute(r chi.Router) *ToyHandler {
	r.Patch("/toys/{id}", h.Update)
	return h
}
func (h *ToyHandler) MountDeleteRoute(r chi.Router) *ToyHandler {
	r.Delete("/toys/{id}", h.Delete)
	return h
}
func (h *ToyHandler) MountListRoute(r chi.Router) *ToyHandler {
	r.Get("/toys", h.List)
	return h
}
func (h *ToyHandler) MountOwnerRoute(r chi.Router) *ToyHandler {
	r.Get("/toys/{id}/owner", h.Owner)
	return h
}
func (h *ToyHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountOwnerRoute(r)
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
