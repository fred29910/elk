// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/masseelch/elk/internal/pets/ent/pet"
	"github.com/masseelch/elk/internal/pets/ent/predicate"
	"github.com/masseelch/elk/internal/pets/ent/toy"
)

// ToyUpdate is the builder for updating Toy entities.
type ToyUpdate struct {
	config
	hooks    []Hook
	mutation *ToyMutation
}

// Where appends a list predicates to the ToyUpdate builder.
func (tu *ToyUpdate) Where(ps ...predicate.Toy) *ToyUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetColor sets the "color" field.
func (tu *ToyUpdate) SetColor(t toy.Color) *ToyUpdate {
	tu.mutation.SetColor(t)
	return tu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (tu *ToyUpdate) SetNillableColor(t *toy.Color) *ToyUpdate {
	if t != nil {
		tu.SetColor(*t)
	}
	return tu
}

// SetMaterial sets the "material" field.
func (tu *ToyUpdate) SetMaterial(t toy.Material) *ToyUpdate {
	tu.mutation.SetMaterial(t)
	return tu
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (tu *ToyUpdate) SetNillableMaterial(t *toy.Material) *ToyUpdate {
	if t != nil {
		tu.SetMaterial(*t)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *ToyUpdate) SetTitle(s string) *ToyUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *ToyUpdate) SetNillableTitle(s *string) *ToyUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetOwnerID sets the "owner" edge to the Pet entity by ID.
func (tu *ToyUpdate) SetOwnerID(id int) *ToyUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetNillableOwnerID sets the "owner" edge to the Pet entity by ID if the given value is not nil.
func (tu *ToyUpdate) SetNillableOwnerID(id *int) *ToyUpdate {
	if id != nil {
		tu = tu.SetOwnerID(*id)
	}
	return tu
}

// SetOwner sets the "owner" edge to the Pet entity.
func (tu *ToyUpdate) SetOwner(p *Pet) *ToyUpdate {
	return tu.SetOwnerID(p.ID)
}

// Mutation returns the ToyMutation object of the builder.
func (tu *ToyUpdate) Mutation() *ToyMutation {
	return tu.mutation
}

// ClearOwner clears the "owner" edge to the Pet entity.
func (tu *ToyUpdate) ClearOwner() *ToyUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ToyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ToyUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ToyUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ToyUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *ToyUpdate) check() error {
	if v, ok := tu.mutation.Color(); ok {
		if err := toy.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Toy.color": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Material(); ok {
		if err := toy.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Toy.material": %w`, err)}
		}
	}
	return nil
}

func (tu *ToyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(toy.Table, toy.Columns, sqlgraph.NewFieldSpec(toy.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Color(); ok {
		_spec.SetField(toy.FieldColor, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Material(); ok {
		_spec.SetField(toy.FieldMaterial, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(toy.FieldTitle, field.TypeString, value)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toy.OwnerTable,
			Columns: []string{toy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toy.OwnerTable,
			Columns: []string{toy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ToyUpdateOne is the builder for updating a single Toy entity.
type ToyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToyMutation
}

// SetColor sets the "color" field.
func (tuo *ToyUpdateOne) SetColor(t toy.Color) *ToyUpdateOne {
	tuo.mutation.SetColor(t)
	return tuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (tuo *ToyUpdateOne) SetNillableColor(t *toy.Color) *ToyUpdateOne {
	if t != nil {
		tuo.SetColor(*t)
	}
	return tuo
}

// SetMaterial sets the "material" field.
func (tuo *ToyUpdateOne) SetMaterial(t toy.Material) *ToyUpdateOne {
	tuo.mutation.SetMaterial(t)
	return tuo
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (tuo *ToyUpdateOne) SetNillableMaterial(t *toy.Material) *ToyUpdateOne {
	if t != nil {
		tuo.SetMaterial(*t)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *ToyUpdateOne) SetTitle(s string) *ToyUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *ToyUpdateOne) SetNillableTitle(s *string) *ToyUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetOwnerID sets the "owner" edge to the Pet entity by ID.
func (tuo *ToyUpdateOne) SetOwnerID(id int) *ToyUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetNillableOwnerID sets the "owner" edge to the Pet entity by ID if the given value is not nil.
func (tuo *ToyUpdateOne) SetNillableOwnerID(id *int) *ToyUpdateOne {
	if id != nil {
		tuo = tuo.SetOwnerID(*id)
	}
	return tuo
}

// SetOwner sets the "owner" edge to the Pet entity.
func (tuo *ToyUpdateOne) SetOwner(p *Pet) *ToyUpdateOne {
	return tuo.SetOwnerID(p.ID)
}

// Mutation returns the ToyMutation object of the builder.
func (tuo *ToyUpdateOne) Mutation() *ToyMutation {
	return tuo.mutation
}

// ClearOwner clears the "owner" edge to the Pet entity.
func (tuo *ToyUpdateOne) ClearOwner() *ToyUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// Where appends a list predicates to the ToyUpdate builder.
func (tuo *ToyUpdateOne) Where(ps ...predicate.Toy) *ToyUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ToyUpdateOne) Select(field string, fields ...string) *ToyUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Toy entity.
func (tuo *ToyUpdateOne) Save(ctx context.Context) (*Toy, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ToyUpdateOne) SaveX(ctx context.Context) *Toy {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ToyUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ToyUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *ToyUpdateOne) check() error {
	if v, ok := tuo.mutation.Color(); ok {
		if err := toy.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Toy.color": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Material(); ok {
		if err := toy.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Toy.material": %w`, err)}
		}
	}
	return nil
}

func (tuo *ToyUpdateOne) sqlSave(ctx context.Context) (_node *Toy, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(toy.Table, toy.Columns, sqlgraph.NewFieldSpec(toy.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Toy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toy.FieldID)
		for _, f := range fields {
			if !toy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != toy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Color(); ok {
		_spec.SetField(toy.FieldColor, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Material(); ok {
		_spec.SetField(toy.FieldMaterial, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(toy.FieldTitle, field.TypeString, value)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toy.OwnerTable,
			Columns: []string{toy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toy.OwnerTable,
			Columns: []string{toy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Toy{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
