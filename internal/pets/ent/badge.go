// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/masseelch/elk/internal/pets/ent/badge"
	"github.com/masseelch/elk/internal/pets/ent/pet"
)

// Badge is the model entity for the Badge schema.
type Badge struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// Color holds the value of the "color" field.
	Color badge.Color `json:"color,omitempty"`
	// Material holds the value of the "material" field.
	Material badge.Material `json:"material,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BadgeQuery when eager-loading is set.
	Edges        BadgeEdges `json:"edges"`
	pet_badge    *int
	selectValues sql.SelectValues
}

// BadgeEdges holds the relations/edges for other nodes in the graph.
type BadgeEdges struct {
	// Wearer holds the value of the wearer edge.
	Wearer *Pet `json:"wearer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WearerOrErr returns the Wearer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BadgeEdges) WearerOrErr() (*Pet, error) {
	if e.Wearer != nil {
		return e.Wearer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "wearer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Badge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case badge.FieldID:
			values[i] = new(sql.NullInt64)
		case badge.FieldColor, badge.FieldMaterial:
			values[i] = new(sql.NullString)
		case badge.ForeignKeys[0]: // pet_badge
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Badge fields.
func (b *Badge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case badge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = uint32(value.Int64)
		case badge.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				b.Color = badge.Color(value.String)
			}
		case badge.FieldMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material", values[i])
			} else if value.Valid {
				b.Material = badge.Material(value.String)
			}
		case badge.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pet_badge", value)
			} else if value.Valid {
				b.pet_badge = new(int)
				*b.pet_badge = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Badge.
// This includes values selected through modifiers, order, etc.
func (b *Badge) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryWearer queries the "wearer" edge of the Badge entity.
func (b *Badge) QueryWearer() *PetQuery {
	return NewBadgeClient(b.config).QueryWearer(b)
}

// Update returns a builder for updating this Badge.
// Note that you need to call Badge.Unwrap() before calling this method if this Badge
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Badge) Update() *BadgeUpdateOne {
	return NewBadgeClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Badge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Badge) Unwrap() *Badge {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Badge is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Badge) String() string {
	var builder strings.Builder
	builder.WriteString("Badge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("color=")
	builder.WriteString(fmt.Sprintf("%v", b.Color))
	builder.WriteString(", ")
	builder.WriteString("material=")
	builder.WriteString(fmt.Sprintf("%v", b.Material))
	builder.WriteByte(')')
	return builder.String()
}

// Badges is a parsable slice of Badge.
type Badges []*Badge
