// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/masseelch/elk/internal/pets/ent/pet"
	"github.com/masseelch/elk/internal/pets/ent/toy"
)

// Toy is the model entity for the Toy schema.
type Toy struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Color holds the value of the "color" field.
	Color toy.Color `json:"color,omitempty"`
	// Material holds the value of the "material" field.
	Material toy.Material `json:"material,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ToyQuery when eager-loading is set.
	Edges        ToyEdges `json:"edges"`
	pet_toys     *int
	selectValues sql.SelectValues
}

// ToyEdges holds the relations/edges for other nodes in the graph.
type ToyEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Pet `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ToyEdges) OwnerOrErr() (*Pet, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Toy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case toy.FieldColor, toy.FieldMaterial, toy.FieldTitle:
			values[i] = new(sql.NullString)
		case toy.FieldID:
			values[i] = new(uuid.UUID)
		case toy.ForeignKeys[0]: // pet_toys
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Toy fields.
func (t *Toy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case toy.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case toy.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				t.Color = toy.Color(value.String)
			}
		case toy.FieldMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material", values[i])
			} else if value.Valid {
				t.Material = toy.Material(value.String)
			}
		case toy.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case toy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pet_toys", value)
			} else if value.Valid {
				t.pet_toys = new(int)
				*t.pet_toys = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Toy.
// This includes values selected through modifiers, order, etc.
func (t *Toy) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Toy entity.
func (t *Toy) QueryOwner() *PetQuery {
	return NewToyClient(t.config).QueryOwner(t)
}

// Update returns a builder for updating this Toy.
// Note that you need to call Toy.Unwrap() before calling this method if this Toy
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Toy) Update() *ToyUpdateOne {
	return NewToyClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Toy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Toy) Unwrap() *Toy {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Toy is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Toy) String() string {
	var builder strings.Builder
	builder.WriteString("Toy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("color=")
	builder.WriteString(fmt.Sprintf("%v", t.Color))
	builder.WriteString(", ")
	builder.WriteString("material=")
	builder.WriteString(fmt.Sprintf("%v", t.Material))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Toys is a parsable slice of Toy.
type Toys []*Toy
