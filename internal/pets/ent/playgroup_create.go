// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/masseelch/elk/internal/pets/ent/pet"
	"github.com/masseelch/elk/internal/pets/ent/playgroup"
)

// PlayGroupCreate is the builder for creating a PlayGroup entity.
type PlayGroupCreate struct {
	config
	mutation *PlayGroupMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (pgc *PlayGroupCreate) SetTitle(s string) *PlayGroupCreate {
	pgc.mutation.SetTitle(s)
	return pgc
}

// SetDescription sets the "description" field.
func (pgc *PlayGroupCreate) SetDescription(s string) *PlayGroupCreate {
	pgc.mutation.SetDescription(s)
	return pgc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pgc *PlayGroupCreate) SetNillableDescription(s *string) *PlayGroupCreate {
	if s != nil {
		pgc.SetDescription(*s)
	}
	return pgc
}

// SetWeekday sets the "weekday" field.
func (pgc *PlayGroupCreate) SetWeekday(pl playgroup.Weekday) *PlayGroupCreate {
	pgc.mutation.SetWeekday(pl)
	return pgc
}

// AddParticipantIDs adds the "participants" edge to the Pet entity by IDs.
func (pgc *PlayGroupCreate) AddParticipantIDs(ids ...int) *PlayGroupCreate {
	pgc.mutation.AddParticipantIDs(ids...)
	return pgc
}

// AddParticipants adds the "participants" edges to the Pet entity.
func (pgc *PlayGroupCreate) AddParticipants(p ...*Pet) *PlayGroupCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgc.AddParticipantIDs(ids...)
}

// Mutation returns the PlayGroupMutation object of the builder.
func (pgc *PlayGroupCreate) Mutation() *PlayGroupMutation {
	return pgc.mutation
}

// Save creates the PlayGroup in the database.
func (pgc *PlayGroupCreate) Save(ctx context.Context) (*PlayGroup, error) {
	return withHooks(ctx, pgc.sqlSave, pgc.mutation, pgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *PlayGroupCreate) SaveX(ctx context.Context) *PlayGroup {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgc *PlayGroupCreate) Exec(ctx context.Context) error {
	_, err := pgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgc *PlayGroupCreate) ExecX(ctx context.Context) {
	if err := pgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgc *PlayGroupCreate) check() error {
	if _, ok := pgc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PlayGroup.title"`)}
	}
	if _, ok := pgc.mutation.Weekday(); !ok {
		return &ValidationError{Name: "weekday", err: errors.New(`ent: missing required field "PlayGroup.weekday"`)}
	}
	if v, ok := pgc.mutation.Weekday(); ok {
		if err := playgroup.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "PlayGroup.weekday": %w`, err)}
		}
	}
	return nil
}

func (pgc *PlayGroupCreate) sqlSave(ctx context.Context) (*PlayGroup, error) {
	if err := pgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pgc.mutation.id = &_node.ID
	pgc.mutation.done = true
	return _node, nil
}

func (pgc *PlayGroupCreate) createSpec() (*PlayGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayGroup{config: pgc.config}
		_spec = sqlgraph.NewCreateSpec(playgroup.Table, sqlgraph.NewFieldSpec(playgroup.FieldID, field.TypeInt))
	)
	if value, ok := pgc.mutation.Title(); ok {
		_spec.SetField(playgroup.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pgc.mutation.Description(); ok {
		_spec.SetField(playgroup.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pgc.mutation.Weekday(); ok {
		_spec.SetField(playgroup.FieldWeekday, field.TypeEnum, value)
		_node.Weekday = value
	}
	if nodes := pgc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   playgroup.ParticipantsTable,
			Columns: playgroup.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayGroupCreateBulk is the builder for creating many PlayGroup entities in bulk.
type PlayGroupCreateBulk struct {
	config
	err      error
	builders []*PlayGroupCreate
}

// Save creates the PlayGroup entities in the database.
func (pgcb *PlayGroupCreateBulk) Save(ctx context.Context) ([]*PlayGroup, error) {
	if pgcb.err != nil {
		return nil, pgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*PlayGroup, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *PlayGroupCreateBulk) SaveX(ctx context.Context) []*PlayGroup {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgcb *PlayGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := pgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgcb *PlayGroupCreateBulk) ExecX(ctx context.Context) {
	if err := pgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
