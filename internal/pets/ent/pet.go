// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/masseelch/elk/internal/pets/ent/badge"
	"github.com/masseelch/elk/internal/pets/ent/pet"
)

// Pet is the model entity for the Pet schema.
type Pet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// Castrated holds the value of the "castrated" field.
	Castrated bool `json:"castrated,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// Nicknames holds the value of the "nicknames" field.
	Nicknames []string `json:"nicknames,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex pet.Sex `json:"sex,omitempty"`
	// Chip holds the value of the "chip" field.
	Chip uuid.UUID `json:"chip,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PetQuery when eager-loading is set.
	Edges        PetEdges `json:"edges"`
	pet_mentor   *int
	pet_spouse   *int
	pet_children *int
	selectValues sql.SelectValues
}

// PetEdges holds the relations/edges for other nodes in the graph.
type PetEdges struct {
	// Badge holds the value of the badge edge.
	Badge *Badge `json:"badge,omitempty"`
	// Protege holds the value of the protege edge.
	Protege *Pet `json:"protege,omitempty"`
	// Mentor holds the value of the mentor edge.
	Mentor *Pet `json:"mentor,omitempty"`
	// Spouse holds the value of the spouse edge.
	Spouse *Pet `json:"spouse,omitempty"`
	// Toys holds the value of the toys edge.
	Toys []*Toy `json:"toys,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Pet `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Pet `json:"children,omitempty"`
	// PlayGroups holds the value of the play_groups edge.
	PlayGroups []*PlayGroup `json:"play_groups,omitempty"`
	// Friends holds the value of the friends edge.
	Friends []*Pet `json:"friends,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// BadgeOrErr returns the Badge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetEdges) BadgeOrErr() (*Badge, error) {
	if e.Badge != nil {
		return e.Badge, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: badge.Label}
	}
	return nil, &NotLoadedError{edge: "badge"}
}

// ProtegeOrErr returns the Protege value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetEdges) ProtegeOrErr() (*Pet, error) {
	if e.Protege != nil {
		return e.Protege, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "protege"}
}

// MentorOrErr returns the Mentor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetEdges) MentorOrErr() (*Pet, error) {
	if e.Mentor != nil {
		return e.Mentor, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "mentor"}
}

// SpouseOrErr returns the Spouse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetEdges) SpouseOrErr() (*Pet, error) {
	if e.Spouse != nil {
		return e.Spouse, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "spouse"}
}

// ToysOrErr returns the Toys value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) ToysOrErr() ([]*Toy, error) {
	if e.loadedTypes[4] {
		return e.Toys, nil
	}
	return nil, &NotLoadedError{edge: "toys"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetEdges) ParentOrErr() (*Pet, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) ChildrenOrErr() ([]*Pet, error) {
	if e.loadedTypes[6] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// PlayGroupsOrErr returns the PlayGroups value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) PlayGroupsOrErr() ([]*PlayGroup, error) {
	if e.loadedTypes[7] {
		return e.PlayGroups, nil
	}
	return nil, &NotLoadedError{edge: "play_groups"}
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) FriendsOrErr() ([]*Pet, error) {
	if e.loadedTypes[8] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pet.FieldNicknames:
			values[i] = new([]byte)
		case pet.FieldCastrated:
			values[i] = new(sql.NullBool)
		case pet.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case pet.FieldID, pet.FieldHeight:
			values[i] = new(sql.NullInt64)
		case pet.FieldName, pet.FieldSex:
			values[i] = new(sql.NullString)
		case pet.FieldBirthday:
			values[i] = new(sql.NullTime)
		case pet.FieldChip:
			values[i] = new(uuid.UUID)
		case pet.ForeignKeys[0]: // pet_mentor
			values[i] = new(sql.NullInt64)
		case pet.ForeignKeys[1]: // pet_spouse
			values[i] = new(sql.NullInt64)
		case pet.ForeignKeys[2]: // pet_children
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pet fields.
func (pe *Pet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case pet.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pe.Height = int(value.Int64)
			}
		case pet.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pe.Weight = value.Float64
			}
		case pet.FieldCastrated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field castrated", values[i])
			} else if value.Valid {
				pe.Castrated = value.Bool
			}
		case pet.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case pet.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				pe.Birthday = value.Time
			}
		case pet.FieldNicknames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nicknames", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.Nicknames); err != nil {
					return fmt.Errorf("unmarshal field nicknames: %w", err)
				}
			}
		case pet.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				pe.Sex = pet.Sex(value.String)
			}
		case pet.FieldChip:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field chip", values[i])
			} else if value != nil {
				pe.Chip = *value
			}
		case pet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pet_mentor", value)
			} else if value.Valid {
				pe.pet_mentor = new(int)
				*pe.pet_mentor = int(value.Int64)
			}
		case pet.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pet_spouse", value)
			} else if value.Valid {
				pe.pet_spouse = new(int)
				*pe.pet_spouse = int(value.Int64)
			}
		case pet.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pet_children", value)
			} else if value.Valid {
				pe.pet_children = new(int)
				*pe.pet_children = int(value.Int64)
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pet.
// This includes values selected through modifiers, order, etc.
func (pe *Pet) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryBadge queries the "badge" edge of the Pet entity.
func (pe *Pet) QueryBadge() *BadgeQuery {
	return NewPetClient(pe.config).QueryBadge(pe)
}

// QueryProtege queries the "protege" edge of the Pet entity.
func (pe *Pet) QueryProtege() *PetQuery {
	return NewPetClient(pe.config).QueryProtege(pe)
}

// QueryMentor queries the "mentor" edge of the Pet entity.
func (pe *Pet) QueryMentor() *PetQuery {
	return NewPetClient(pe.config).QueryMentor(pe)
}

// QuerySpouse queries the "spouse" edge of the Pet entity.
func (pe *Pet) QuerySpouse() *PetQuery {
	return NewPetClient(pe.config).QuerySpouse(pe)
}

// QueryToys queries the "toys" edge of the Pet entity.
func (pe *Pet) QueryToys() *ToyQuery {
	return NewPetClient(pe.config).QueryToys(pe)
}

// QueryParent queries the "parent" edge of the Pet entity.
func (pe *Pet) QueryParent() *PetQuery {
	return NewPetClient(pe.config).QueryParent(pe)
}

// QueryChildren queries the "children" edge of the Pet entity.
func (pe *Pet) QueryChildren() *PetQuery {
	return NewPetClient(pe.config).QueryChildren(pe)
}

// QueryPlayGroups queries the "play_groups" edge of the Pet entity.
func (pe *Pet) QueryPlayGroups() *PlayGroupQuery {
	return NewPetClient(pe.config).QueryPlayGroups(pe)
}

// QueryFriends queries the "friends" edge of the Pet entity.
func (pe *Pet) QueryFriends() *PetQuery {
	return NewPetClient(pe.config).QueryFriends(pe)
}

// Update returns a builder for updating this Pet.
// Note that you need to call Pet.Unwrap() before calling this method if this Pet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Pet) Update() *PetUpdateOne {
	return NewPetClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Pet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Pet) Unwrap() *Pet {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pet is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Pet) String() string {
	var builder strings.Builder
	builder.WriteString("Pet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", pe.Height))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", pe.Weight))
	builder.WriteString(", ")
	builder.WriteString("castrated=")
	builder.WriteString(fmt.Sprintf("%v", pe.Castrated))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(pe.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("nicknames=")
	builder.WriteString(fmt.Sprintf("%v", pe.Nicknames))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", pe.Sex))
	builder.WriteString(", ")
	builder.WriteString("chip=")
	builder.WriteString(fmt.Sprintf("%v", pe.Chip))
	builder.WriteByte(')')
	return builder.String()
}

// Pets is a parsable slice of Pet.
type Pets []*Pet
