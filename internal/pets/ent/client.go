// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/masseelch/elk/internal/pets/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/masseelch/elk/internal/pets/ent/badge"
	"github.com/masseelch/elk/internal/pets/ent/pet"
	"github.com/masseelch/elk/internal/pets/ent/playgroup"
	"github.com/masseelch/elk/internal/pets/ent/toy"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Badge is the client for interacting with the Badge builders.
	Badge *BadgeClient
	// Pet is the client for interacting with the Pet builders.
	Pet *PetClient
	// PlayGroup is the client for interacting with the PlayGroup builders.
	PlayGroup *PlayGroupClient
	// Toy is the client for interacting with the Toy builders.
	Toy *ToyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Badge = NewBadgeClient(c.config)
	c.Pet = NewPetClient(c.config)
	c.PlayGroup = NewPlayGroupClient(c.config)
	c.Toy = NewToyClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Badge:     NewBadgeClient(cfg),
		Pet:       NewPetClient(cfg),
		PlayGroup: NewPlayGroupClient(cfg),
		Toy:       NewToyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Badge:     NewBadgeClient(cfg),
		Pet:       NewPetClient(cfg),
		PlayGroup: NewPlayGroupClient(cfg),
		Toy:       NewToyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Badge.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Badge.Use(hooks...)
	c.Pet.Use(hooks...)
	c.PlayGroup.Use(hooks...)
	c.Toy.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Badge.Intercept(interceptors...)
	c.Pet.Intercept(interceptors...)
	c.PlayGroup.Intercept(interceptors...)
	c.Toy.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BadgeMutation:
		return c.Badge.mutate(ctx, m)
	case *PetMutation:
		return c.Pet.mutate(ctx, m)
	case *PlayGroupMutation:
		return c.PlayGroup.mutate(ctx, m)
	case *ToyMutation:
		return c.Toy.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BadgeClient is a client for the Badge schema.
type BadgeClient struct {
	config
}

// NewBadgeClient returns a client for the Badge from the given config.
func NewBadgeClient(c config) *BadgeClient {
	return &BadgeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `badge.Hooks(f(g(h())))`.
func (c *BadgeClient) Use(hooks ...Hook) {
	c.hooks.Badge = append(c.hooks.Badge, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `badge.Intercept(f(g(h())))`.
func (c *BadgeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Badge = append(c.inters.Badge, interceptors...)
}

// Create returns a builder for creating a Badge entity.
func (c *BadgeClient) Create() *BadgeCreate {
	mutation := newBadgeMutation(c.config, OpCreate)
	return &BadgeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Badge entities.
func (c *BadgeClient) CreateBulk(builders ...*BadgeCreate) *BadgeCreateBulk {
	return &BadgeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BadgeClient) MapCreateBulk(slice any, setFunc func(*BadgeCreate, int)) *BadgeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BadgeCreateBulk{err: fmt.Errorf("calling to BadgeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BadgeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BadgeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Badge.
func (c *BadgeClient) Update() *BadgeUpdate {
	mutation := newBadgeMutation(c.config, OpUpdate)
	return &BadgeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BadgeClient) UpdateOne(b *Badge) *BadgeUpdateOne {
	mutation := newBadgeMutation(c.config, OpUpdateOne, withBadge(b))
	return &BadgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BadgeClient) UpdateOneID(id uint32) *BadgeUpdateOne {
	mutation := newBadgeMutation(c.config, OpUpdateOne, withBadgeID(id))
	return &BadgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Badge.
func (c *BadgeClient) Delete() *BadgeDelete {
	mutation := newBadgeMutation(c.config, OpDelete)
	return &BadgeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BadgeClient) DeleteOne(b *Badge) *BadgeDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BadgeClient) DeleteOneID(id uint32) *BadgeDeleteOne {
	builder := c.Delete().Where(badge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BadgeDeleteOne{builder}
}

// Query returns a query builder for Badge.
func (c *BadgeClient) Query() *BadgeQuery {
	return &BadgeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBadge},
		inters: c.Interceptors(),
	}
}

// Get returns a Badge entity by its id.
func (c *BadgeClient) Get(ctx context.Context, id uint32) (*Badge, error) {
	return c.Query().Where(badge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BadgeClient) GetX(ctx context.Context, id uint32) *Badge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWearer queries the wearer edge of a Badge.
func (c *BadgeClient) QueryWearer(b *Badge) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(badge.Table, badge.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, badge.WearerTable, badge.WearerColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BadgeClient) Hooks() []Hook {
	return c.hooks.Badge
}

// Interceptors returns the client interceptors.
func (c *BadgeClient) Interceptors() []Interceptor {
	return c.inters.Badge
}

func (c *BadgeClient) mutate(ctx context.Context, m *BadgeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BadgeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BadgeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BadgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BadgeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Badge mutation op: %q", m.Op())
	}
}

// PetClient is a client for the Pet schema.
type PetClient struct {
	config
}

// NewPetClient returns a client for the Pet from the given config.
func NewPetClient(c config) *PetClient {
	return &PetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pet.Hooks(f(g(h())))`.
func (c *PetClient) Use(hooks ...Hook) {
	c.hooks.Pet = append(c.hooks.Pet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pet.Intercept(f(g(h())))`.
func (c *PetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pet = append(c.inters.Pet, interceptors...)
}

// Create returns a builder for creating a Pet entity.
func (c *PetClient) Create() *PetCreate {
	mutation := newPetMutation(c.config, OpCreate)
	return &PetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pet entities.
func (c *PetClient) CreateBulk(builders ...*PetCreate) *PetCreateBulk {
	return &PetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PetClient) MapCreateBulk(slice any, setFunc func(*PetCreate, int)) *PetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PetCreateBulk{err: fmt.Errorf("calling to PetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pet.
func (c *PetClient) Update() *PetUpdate {
	mutation := newPetMutation(c.config, OpUpdate)
	return &PetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PetClient) UpdateOne(pe *Pet) *PetUpdateOne {
	mutation := newPetMutation(c.config, OpUpdateOne, withPet(pe))
	return &PetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PetClient) UpdateOneID(id int) *PetUpdateOne {
	mutation := newPetMutation(c.config, OpUpdateOne, withPetID(id))
	return &PetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pet.
func (c *PetClient) Delete() *PetDelete {
	mutation := newPetMutation(c.config, OpDelete)
	return &PetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PetClient) DeleteOne(pe *Pet) *PetDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PetClient) DeleteOneID(id int) *PetDeleteOne {
	builder := c.Delete().Where(pet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PetDeleteOne{builder}
}

// Query returns a query builder for Pet.
func (c *PetClient) Query() *PetQuery {
	return &PetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePet},
		inters: c.Interceptors(),
	}
}

// Get returns a Pet entity by its id.
func (c *PetClient) Get(ctx context.Context, id int) (*Pet, error) {
	return c.Query().Where(pet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PetClient) GetX(ctx context.Context, id int) *Pet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBadge queries the badge edge of a Pet.
func (c *PetClient) QueryBadge(pe *Pet) *BadgeQuery {
	query := (&BadgeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(badge.Table, badge.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, pet.BadgeTable, pet.BadgeColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProtege queries the protege edge of a Pet.
func (c *PetClient) QueryProtege(pe *Pet) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, pet.ProtegeTable, pet.ProtegeColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMentor queries the mentor edge of a Pet.
func (c *PetClient) QueryMentor(pe *Pet) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, pet.MentorTable, pet.MentorColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpouse queries the spouse edge of a Pet.
func (c *PetClient) QuerySpouse(pe *Pet) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, pet.SpouseTable, pet.SpouseColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToys queries the toys edge of a Pet.
func (c *PetClient) QueryToys(pe *Pet) *ToyQuery {
	query := (&ToyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(toy.Table, toy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pet.ToysTable, pet.ToysColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Pet.
func (c *PetClient) QueryParent(pe *Pet) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pet.ParentTable, pet.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Pet.
func (c *PetClient) QueryChildren(pe *Pet) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pet.ChildrenTable, pet.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayGroups queries the play_groups edge of a Pet.
func (c *PetClient) QueryPlayGroups(pe *Pet) *PlayGroupQuery {
	query := (&PlayGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(playgroup.Table, playgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, pet.PlayGroupsTable, pet.PlayGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriends queries the friends edge of a Pet.
func (c *PetClient) QueryFriends(pe *Pet) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, pet.FriendsTable, pet.FriendsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PetClient) Hooks() []Hook {
	return c.hooks.Pet
}

// Interceptors returns the client interceptors.
func (c *PetClient) Interceptors() []Interceptor {
	return c.inters.Pet
}

func (c *PetClient) mutate(ctx context.Context, m *PetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pet mutation op: %q", m.Op())
	}
}

// PlayGroupClient is a client for the PlayGroup schema.
type PlayGroupClient struct {
	config
}

// NewPlayGroupClient returns a client for the PlayGroup from the given config.
func NewPlayGroupClient(c config) *PlayGroupClient {
	return &PlayGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playgroup.Hooks(f(g(h())))`.
func (c *PlayGroupClient) Use(hooks ...Hook) {
	c.hooks.PlayGroup = append(c.hooks.PlayGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `playgroup.Intercept(f(g(h())))`.
func (c *PlayGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlayGroup = append(c.inters.PlayGroup, interceptors...)
}

// Create returns a builder for creating a PlayGroup entity.
func (c *PlayGroupClient) Create() *PlayGroupCreate {
	mutation := newPlayGroupMutation(c.config, OpCreate)
	return &PlayGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayGroup entities.
func (c *PlayGroupClient) CreateBulk(builders ...*PlayGroupCreate) *PlayGroupCreateBulk {
	return &PlayGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlayGroupClient) MapCreateBulk(slice any, setFunc func(*PlayGroupCreate, int)) *PlayGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlayGroupCreateBulk{err: fmt.Errorf("calling to PlayGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlayGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlayGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayGroup.
func (c *PlayGroupClient) Update() *PlayGroupUpdate {
	mutation := newPlayGroupMutation(c.config, OpUpdate)
	return &PlayGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayGroupClient) UpdateOne(pg *PlayGroup) *PlayGroupUpdateOne {
	mutation := newPlayGroupMutation(c.config, OpUpdateOne, withPlayGroup(pg))
	return &PlayGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayGroupClient) UpdateOneID(id int) *PlayGroupUpdateOne {
	mutation := newPlayGroupMutation(c.config, OpUpdateOne, withPlayGroupID(id))
	return &PlayGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayGroup.
func (c *PlayGroupClient) Delete() *PlayGroupDelete {
	mutation := newPlayGroupMutation(c.config, OpDelete)
	return &PlayGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayGroupClient) DeleteOne(pg *PlayGroup) *PlayGroupDeleteOne {
	return c.DeleteOneID(pg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayGroupClient) DeleteOneID(id int) *PlayGroupDeleteOne {
	builder := c.Delete().Where(playgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayGroupDeleteOne{builder}
}

// Query returns a query builder for PlayGroup.
func (c *PlayGroupClient) Query() *PlayGroupQuery {
	return &PlayGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a PlayGroup entity by its id.
func (c *PlayGroupClient) Get(ctx context.Context, id int) (*PlayGroup, error) {
	return c.Query().Where(playgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayGroupClient) GetX(ctx context.Context, id int) *PlayGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParticipants queries the participants edge of a PlayGroup.
func (c *PlayGroupClient) QueryParticipants(pg *PlayGroup) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playgroup.Table, playgroup.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, playgroup.ParticipantsTable, playgroup.ParticipantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayGroupClient) Hooks() []Hook {
	return c.hooks.PlayGroup
}

// Interceptors returns the client interceptors.
func (c *PlayGroupClient) Interceptors() []Interceptor {
	return c.inters.PlayGroup
}

func (c *PlayGroupClient) mutate(ctx context.Context, m *PlayGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlayGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlayGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlayGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlayGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlayGroup mutation op: %q", m.Op())
	}
}

// ToyClient is a client for the Toy schema.
type ToyClient struct {
	config
}

// NewToyClient returns a client for the Toy from the given config.
func NewToyClient(c config) *ToyClient {
	return &ToyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `toy.Hooks(f(g(h())))`.
func (c *ToyClient) Use(hooks ...Hook) {
	c.hooks.Toy = append(c.hooks.Toy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `toy.Intercept(f(g(h())))`.
func (c *ToyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Toy = append(c.inters.Toy, interceptors...)
}

// Create returns a builder for creating a Toy entity.
func (c *ToyClient) Create() *ToyCreate {
	mutation := newToyMutation(c.config, OpCreate)
	return &ToyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Toy entities.
func (c *ToyClient) CreateBulk(builders ...*ToyCreate) *ToyCreateBulk {
	return &ToyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ToyClient) MapCreateBulk(slice any, setFunc func(*ToyCreate, int)) *ToyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ToyCreateBulk{err: fmt.Errorf("calling to ToyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ToyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ToyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Toy.
func (c *ToyClient) Update() *ToyUpdate {
	mutation := newToyMutation(c.config, OpUpdate)
	return &ToyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ToyClient) UpdateOne(t *Toy) *ToyUpdateOne {
	mutation := newToyMutation(c.config, OpUpdateOne, withToy(t))
	return &ToyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ToyClient) UpdateOneID(id uuid.UUID) *ToyUpdateOne {
	mutation := newToyMutation(c.config, OpUpdateOne, withToyID(id))
	return &ToyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Toy.
func (c *ToyClient) Delete() *ToyDelete {
	mutation := newToyMutation(c.config, OpDelete)
	return &ToyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ToyClient) DeleteOne(t *Toy) *ToyDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ToyClient) DeleteOneID(id uuid.UUID) *ToyDeleteOne {
	builder := c.Delete().Where(toy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ToyDeleteOne{builder}
}

// Query returns a query builder for Toy.
func (c *ToyClient) Query() *ToyQuery {
	return &ToyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToy},
		inters: c.Interceptors(),
	}
}

// Get returns a Toy entity by its id.
func (c *ToyClient) Get(ctx context.Context, id uuid.UUID) (*Toy, error) {
	return c.Query().Where(toy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ToyClient) GetX(ctx context.Context, id uuid.UUID) *Toy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Toy.
func (c *ToyClient) QueryOwner(t *Toy) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(toy.Table, toy.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, toy.OwnerTable, toy.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ToyClient) Hooks() []Hook {
	return c.hooks.Toy
}

// Interceptors returns the client interceptors.
func (c *ToyClient) Interceptors() []Interceptor {
	return c.inters.Toy
}

func (c *ToyClient) mutate(ctx context.Context, m *ToyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ToyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ToyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ToyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ToyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Toy mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Badge, Pet, PlayGroup, Toy []ent.Hook
	}
	inters struct {
		Badge, Pet, PlayGroup, Toy []ent.Interceptor
	}
)
