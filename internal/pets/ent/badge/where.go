// Code generated by ent, DO NOT EDIT.

package badge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/masseelch/elk/internal/pets/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldID, id))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v Color) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v Color) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...Color) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...Color) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldColor, vs...))
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v Material) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldMaterial, v))
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v Material) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldMaterial, v))
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...Material) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldMaterial, vs...))
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...Material) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldMaterial, vs...))
}

// HasWearer applies the HasEdge predicate on the "wearer" edge.
func HasWearer() predicate.Badge {
	return predicate.Badge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WearerTable, WearerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWearerWith applies the HasEdge predicate on the "wearer" edge with a given conditions (other predicates).
func HasWearerWith(preds ...predicate.Pet) predicate.Badge {
	return predicate.Badge(func(s *sql.Selector) {
		step := newWearerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.NotPredicates(p))
}
