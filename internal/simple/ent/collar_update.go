// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/masseelch/elk/internal/simple/ent/collar"
	"github.com/masseelch/elk/internal/simple/ent/pet"
	"github.com/masseelch/elk/internal/simple/ent/predicate"
)

// CollarUpdate is the builder for updating Collar entities.
type CollarUpdate struct {
	config
	hooks    []Hook
	mutation *CollarMutation
}

// Where appends a list predicates to the CollarUpdate builder.
func (cu *CollarUpdate) Where(ps ...predicate.Collar) *CollarUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetColor sets the "color" field.
func (cu *CollarUpdate) SetColor(c collar.Color) *CollarUpdate {
	cu.mutation.SetColor(c)
	return cu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cu *CollarUpdate) SetNillableColor(c *collar.Color) *CollarUpdate {
	if c != nil {
		cu.SetColor(*c)
	}
	return cu
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (cu *CollarUpdate) SetPetID(id string) *CollarUpdate {
	cu.mutation.SetPetID(id)
	return cu
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (cu *CollarUpdate) SetNillablePetID(id *string) *CollarUpdate {
	if id != nil {
		cu = cu.SetPetID(*id)
	}
	return cu
}

// SetPet sets the "pet" edge to the Pet entity.
func (cu *CollarUpdate) SetPet(p *Pet) *CollarUpdate {
	return cu.SetPetID(p.ID)
}

// Mutation returns the CollarMutation object of the builder.
func (cu *CollarUpdate) Mutation() *CollarMutation {
	return cu.mutation
}

// ClearPet clears the "pet" edge to the Pet entity.
func (cu *CollarUpdate) ClearPet() *CollarUpdate {
	cu.mutation.ClearPet()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollarUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollarUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollarUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollarUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollarUpdate) check() error {
	if v, ok := cu.mutation.Color(); ok {
		if err := collar.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Collar.color": %w`, err)}
		}
	}
	return nil
}

func (cu *CollarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collar.Table, collar.Columns, sqlgraph.NewFieldSpec(collar.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.SetField(collar.FieldColor, field.TypeEnum, value)
	}
	if cu.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   collar.PetTable,
			Columns: []string{collar.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   collar.PetTable,
			Columns: []string{collar.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollarUpdateOne is the builder for updating a single Collar entity.
type CollarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollarMutation
}

// SetColor sets the "color" field.
func (cuo *CollarUpdateOne) SetColor(c collar.Color) *CollarUpdateOne {
	cuo.mutation.SetColor(c)
	return cuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cuo *CollarUpdateOne) SetNillableColor(c *collar.Color) *CollarUpdateOne {
	if c != nil {
		cuo.SetColor(*c)
	}
	return cuo
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (cuo *CollarUpdateOne) SetPetID(id string) *CollarUpdateOne {
	cuo.mutation.SetPetID(id)
	return cuo
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (cuo *CollarUpdateOne) SetNillablePetID(id *string) *CollarUpdateOne {
	if id != nil {
		cuo = cuo.SetPetID(*id)
	}
	return cuo
}

// SetPet sets the "pet" edge to the Pet entity.
func (cuo *CollarUpdateOne) SetPet(p *Pet) *CollarUpdateOne {
	return cuo.SetPetID(p.ID)
}

// Mutation returns the CollarMutation object of the builder.
func (cuo *CollarUpdateOne) Mutation() *CollarMutation {
	return cuo.mutation
}

// ClearPet clears the "pet" edge to the Pet entity.
func (cuo *CollarUpdateOne) ClearPet() *CollarUpdateOne {
	cuo.mutation.ClearPet()
	return cuo
}

// Where appends a list predicates to the CollarUpdate builder.
func (cuo *CollarUpdateOne) Where(ps ...predicate.Collar) *CollarUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollarUpdateOne) Select(field string, fields ...string) *CollarUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collar entity.
func (cuo *CollarUpdateOne) Save(ctx context.Context) (*Collar, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollarUpdateOne) SaveX(ctx context.Context) *Collar {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollarUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollarUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollarUpdateOne) check() error {
	if v, ok := cuo.mutation.Color(); ok {
		if err := collar.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Collar.color": %w`, err)}
		}
	}
	return nil
}

func (cuo *CollarUpdateOne) sqlSave(ctx context.Context) (_node *Collar, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collar.Table, collar.Columns, sqlgraph.NewFieldSpec(collar.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collar.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collar.FieldID)
		for _, f := range fields {
			if !collar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.SetField(collar.FieldColor, field.TypeEnum, value)
	}
	if cuo.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   collar.PetTable,
			Columns: []string{collar.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   collar.PetTable,
			Columns: []string{collar.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collar{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
