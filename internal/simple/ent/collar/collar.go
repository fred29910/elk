// Code generated by ent, DO NOT EDIT.

package collar

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the collar type in the database.
	Label = "collar"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// EdgePet holds the string denoting the pet edge name in mutations.
	EdgePet = "pet"
	// Table holds the table name of the collar in the database.
	Table = "collars"
	// PetTable is the table that holds the pet relation/edge.
	PetTable = "collars"
	// PetInverseTable is the table name for the Pet entity.
	// It exists in this package in order to avoid circular dependency with the "pet" package.
	PetInverseTable = "pets"
	// PetColumn is the table column denoting the pet relation/edge.
	PetColumn = "pet_collar"
)

// Columns holds all SQL columns for collar fields.
var Columns = []string{
	FieldID,
	FieldColor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "collars"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"pet_collar",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Color defines the type for the "color" enum field.
type Color string

// Color values.
const (
	ColorGreen Color = "green"
	ColorRed   Color = "red"
	ColorBlue  Color = "blue"
)

func (c Color) String() string {
	return string(c)
}

// ColorValidator is a validator for the "color" field enum values. It is called by the builders before save.
func ColorValidator(c Color) error {
	switch c {
	case ColorGreen, ColorRed, ColorBlue:
		return nil
	default:
		return fmt.Errorf("collar: invalid enum value for color field: %q", c)
	}
}

// OrderOption defines the ordering options for the Collar queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByPetField orders the results by pet field.
func ByPetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPetStep(), sql.OrderByField(field, opts...))
	}
}
func newPetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PetTable, PetColumn),
	)
}
