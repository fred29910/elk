// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/masseelch/elk/internal/simple/ent/collar"
	"github.com/masseelch/elk/internal/simple/ent/pet"
)

// Collar is the model entity for the Collar schema.
type Collar struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Color holds the value of the "color" field.
	Color collar.Color `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollarQuery when eager-loading is set.
	Edges        CollarEdges `json:"edges"`
	pet_collar   *string
	selectValues sql.SelectValues
}

// CollarEdges holds the relations/edges for other nodes in the graph.
type CollarEdges struct {
	// Pet holds the value of the pet edge.
	Pet *Pet `json:"pet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PetOrErr returns the Pet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollarEdges) PetOrErr() (*Pet, error) {
	if e.Pet != nil {
		return e.Pet, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "pet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Collar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case collar.FieldID:
			values[i] = new(sql.NullInt64)
		case collar.FieldColor:
			values[i] = new(sql.NullString)
		case collar.ForeignKeys[0]: // pet_collar
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Collar fields.
func (c *Collar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case collar.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				c.Color = collar.Color(value.String)
			}
		case collar.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pet_collar", values[i])
			} else if value.Valid {
				c.pet_collar = new(string)
				*c.pet_collar = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Collar.
// This includes values selected through modifiers, order, etc.
func (c *Collar) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryPet queries the "pet" edge of the Collar entity.
func (c *Collar) QueryPet() *PetQuery {
	return NewCollarClient(c.config).QueryPet(c)
}

// Update returns a builder for updating this Collar.
// Note that you need to call Collar.Unwrap() before calling this method if this Collar
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Collar) Update() *CollarUpdateOne {
	return NewCollarClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Collar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Collar) Unwrap() *Collar {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Collar is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Collar) String() string {
	var builder strings.Builder
	builder.WriteString("Collar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("color=")
	builder.WriteString(fmt.Sprintf("%v", c.Color))
	builder.WriteByte(')')
	return builder.String()
}

// Collars is a parsable slice of Collar.
type Collars []*Collar
