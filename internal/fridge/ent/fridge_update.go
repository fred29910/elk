// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/masseelch/elk/internal/fridge/ent/compartment"
	"github.com/masseelch/elk/internal/fridge/ent/fridge"
	"github.com/masseelch/elk/internal/fridge/ent/predicate"
)

// FridgeUpdate is the builder for updating Fridge entities.
type FridgeUpdate struct {
	config
	hooks    []Hook
	mutation *FridgeMutation
}

// Where appends a list predicates to the FridgeUpdate builder.
func (fu *FridgeUpdate) Where(ps ...predicate.Fridge) *FridgeUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTitle sets the "title" field.
func (fu *FridgeUpdate) SetTitle(s string) *FridgeUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fu *FridgeUpdate) SetNillableTitle(s *string) *FridgeUpdate {
	if s != nil {
		fu.SetTitle(*s)
	}
	return fu
}

// AddCompartmentIDs adds the "compartments" edge to the Compartment entity by IDs.
func (fu *FridgeUpdate) AddCompartmentIDs(ids ...int) *FridgeUpdate {
	fu.mutation.AddCompartmentIDs(ids...)
	return fu
}

// AddCompartments adds the "compartments" edges to the Compartment entity.
func (fu *FridgeUpdate) AddCompartments(c ...*Compartment) *FridgeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.AddCompartmentIDs(ids...)
}

// Mutation returns the FridgeMutation object of the builder.
func (fu *FridgeUpdate) Mutation() *FridgeMutation {
	return fu.mutation
}

// ClearCompartments clears all "compartments" edges to the Compartment entity.
func (fu *FridgeUpdate) ClearCompartments() *FridgeUpdate {
	fu.mutation.ClearCompartments()
	return fu
}

// RemoveCompartmentIDs removes the "compartments" edge to Compartment entities by IDs.
func (fu *FridgeUpdate) RemoveCompartmentIDs(ids ...int) *FridgeUpdate {
	fu.mutation.RemoveCompartmentIDs(ids...)
	return fu
}

// RemoveCompartments removes "compartments" edges to Compartment entities.
func (fu *FridgeUpdate) RemoveCompartments(c ...*Compartment) *FridgeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.RemoveCompartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FridgeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FridgeUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FridgeUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FridgeUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FridgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fridge.Table, fridge.Columns, sqlgraph.NewFieldSpec(fridge.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(fridge.FieldTitle, field.TypeString, value)
	}
	if fu.mutation.CompartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fridge.CompartmentsTable,
			Columns: []string{fridge.CompartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compartment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedCompartmentsIDs(); len(nodes) > 0 && !fu.mutation.CompartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fridge.CompartmentsTable,
			Columns: []string{fridge.CompartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CompartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fridge.CompartmentsTable,
			Columns: []string{fridge.CompartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fridge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FridgeUpdateOne is the builder for updating a single Fridge entity.
type FridgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FridgeMutation
}

// SetTitle sets the "title" field.
func (fuo *FridgeUpdateOne) SetTitle(s string) *FridgeUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fuo *FridgeUpdateOne) SetNillableTitle(s *string) *FridgeUpdateOne {
	if s != nil {
		fuo.SetTitle(*s)
	}
	return fuo
}

// AddCompartmentIDs adds the "compartments" edge to the Compartment entity by IDs.
func (fuo *FridgeUpdateOne) AddCompartmentIDs(ids ...int) *FridgeUpdateOne {
	fuo.mutation.AddCompartmentIDs(ids...)
	return fuo
}

// AddCompartments adds the "compartments" edges to the Compartment entity.
func (fuo *FridgeUpdateOne) AddCompartments(c ...*Compartment) *FridgeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.AddCompartmentIDs(ids...)
}

// Mutation returns the FridgeMutation object of the builder.
func (fuo *FridgeUpdateOne) Mutation() *FridgeMutation {
	return fuo.mutation
}

// ClearCompartments clears all "compartments" edges to the Compartment entity.
func (fuo *FridgeUpdateOne) ClearCompartments() *FridgeUpdateOne {
	fuo.mutation.ClearCompartments()
	return fuo
}

// RemoveCompartmentIDs removes the "compartments" edge to Compartment entities by IDs.
func (fuo *FridgeUpdateOne) RemoveCompartmentIDs(ids ...int) *FridgeUpdateOne {
	fuo.mutation.RemoveCompartmentIDs(ids...)
	return fuo
}

// RemoveCompartments removes "compartments" edges to Compartment entities.
func (fuo *FridgeUpdateOne) RemoveCompartments(c ...*Compartment) *FridgeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.RemoveCompartmentIDs(ids...)
}

// Where appends a list predicates to the FridgeUpdate builder.
func (fuo *FridgeUpdateOne) Where(ps ...predicate.Fridge) *FridgeUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FridgeUpdateOne) Select(field string, fields ...string) *FridgeUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fridge entity.
func (fuo *FridgeUpdateOne) Save(ctx context.Context) (*Fridge, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FridgeUpdateOne) SaveX(ctx context.Context) *Fridge {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FridgeUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FridgeUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FridgeUpdateOne) sqlSave(ctx context.Context) (_node *Fridge, err error) {
	_spec := sqlgraph.NewUpdateSpec(fridge.Table, fridge.Columns, sqlgraph.NewFieldSpec(fridge.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fridge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fridge.FieldID)
		for _, f := range fields {
			if !fridge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fridge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(fridge.FieldTitle, field.TypeString, value)
	}
	if fuo.mutation.CompartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fridge.CompartmentsTable,
			Columns: []string{fridge.CompartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compartment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedCompartmentsIDs(); len(nodes) > 0 && !fuo.mutation.CompartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fridge.CompartmentsTable,
			Columns: []string{fridge.CompartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CompartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fridge.CompartmentsTable,
			Columns: []string{fridge.CompartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fridge{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fridge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
