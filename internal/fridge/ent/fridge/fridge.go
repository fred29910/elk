// Code generated by ent, DO NOT EDIT.

package fridge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fridge type in the database.
	Label = "fridge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgeCompartments holds the string denoting the compartments edge name in mutations.
	EdgeCompartments = "compartments"
	// Table holds the table name of the fridge in the database.
	Table = "fridges"
	// CompartmentsTable is the table that holds the compartments relation/edge.
	CompartmentsTable = "compartments"
	// CompartmentsInverseTable is the table name for the Compartment entity.
	// It exists in this package in order to avoid circular dependency with the "compartment" package.
	CompartmentsInverseTable = "compartments"
	// CompartmentsColumn is the table column denoting the compartments relation/edge.
	CompartmentsColumn = "fridge_compartments"
)

// Columns holds all SQL columns for fridge fields.
var Columns = []string{
	FieldID,
	FieldTitle,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Fridge queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCompartmentsCount orders the results by compartments count.
func ByCompartmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompartmentsStep(), opts...)
	}
}

// ByCompartments orders the results by compartments terms.
func ByCompartments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompartmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompartmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompartmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompartmentsTable, CompartmentsColumn),
	)
}
