// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/mailru/easyjson"
	"github.com/masseelch/elk/internal/fridge/ent"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// Compartment1151786357View represents the data serialized for the following serialization group combinations:
	// []
	Compartment1151786357View struct {
		ID   int    `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
	}
	Compartment1151786357Views []*Compartment1151786357View
)

func NewCompartment1151786357View(e *ent.Compartment) *Compartment1151786357View {
	if e == nil {
		return nil
	}
	return &Compartment1151786357View{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewCompartment1151786357Views(es []*ent.Compartment) Compartment1151786357Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Compartment1151786357Views, len(es))
	for i, e := range es {
		r[i] = NewCompartment1151786357View(e)
	}
	return r
}

type (
	// Fridge2716213877View represents the data serialized for the following serialization group combinations:
	// []
	Fridge2716213877View struct {
		ID    int    `json:"id,omitempty"`
		Title string `json:"title,omitempty"`
	}
	Fridge2716213877Views []*Fridge2716213877View
)

func NewFridge2716213877View(e *ent.Fridge) *Fridge2716213877View {
	if e == nil {
		return nil
	}
	return &Fridge2716213877View{
		ID:    e.ID,
		Title: e.Title,
	}
}

func NewFridge2716213877Views(es []*ent.Fridge) Fridge2716213877Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Fridge2716213877Views, len(es))
	for i, e := range es {
		r[i] = NewFridge2716213877View(e)
	}
	return r
}

type (
	// Item1509516544View represents the data serialized for the following serialization group combinations:
	// []
	Item1509516544View struct {
		ID   int    `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
	}
	Item1509516544Views []*Item1509516544View
)

func NewItem1509516544View(e *ent.Item) *Item1509516544View {
	if e == nil {
		return nil
	}
	return &Item1509516544View{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewItem1509516544Views(es []*ent.Item) Item1509516544Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Item1509516544Views, len(es))
	for i, e := range es {
		r[i] = NewItem1509516544View(e)
	}
	return r
}
